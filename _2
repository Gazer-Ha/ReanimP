--// CONFIGURATION
local fake_transparency = 0.8
local animationId = "rbxassetid://17603135849"

--// SERVICES
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

--// ANIMATION MODULE
local Main = {}
Main.__index = Main

function Main.LoadDummy(DummyChar)
	local self = setmetatable({}, Main)
	self.char = DummyChar
	return self
end

local function getAnimation(animationId)
	local success, anim = pcall(function()
		return game:GetObjects(animationId)[1]
	end)
	return success and anim or nil
end

local function kftotbl(kf)
	local tbl = {}
	for _, pose in pairs(kf:GetDescendants()) do
		if pose:IsA("Pose") then
			tbl[string.sub(pose.Name, 1, 1) .. string.sub(pose.Name, #pose.Name)] = pose.CFrame
		end
	end
	return tbl
end

local function getSpeed(lastTimeStamp, currentTimeStamp)
	return math.abs(currentTimeStamp - lastTimeStamp)
end

local function getnext(tbl, number)
	local closest, minDist = nil, math.huge
	for i in pairs(tbl) do
		local diff = i - number
		if diff > 0 and diff < minDist then
			closest = i
			minDist = diff
		end
	end
	return closest or 0
end

function Main:LoadAnimation(animationId)
	local animObj = getAnimation(animationId)
	if not animObj then return end
	local self = setmetatable({}, Main)
	self.char = self.char
	self.animObject = animObj
	return self
end

function Main:Play()
	local Character = self.char
	local animObj = self.animObject
	local animData = {}
	for _, kf in pairs(animObj:GetChildren()) do
		if kf:IsA("Keyframe") then
			animData[kf.Time] = kftotbl(kf)
		end
	end

	local joints = {
		Lg = Character.Torso:FindFirstChild("Left Hip"),
		Rg = Character.Torso:FindFirstChild("Right Hip"),
		Lm = Character.Torso:FindFirstChild("Left Shoulder"),
		Rm = Character.Torso:FindFirstChild("Right Shoulder"),
		To = Character.HumanoidRootPart:FindFirstChild("RootJoint"),
		Hd = Character.Torso:FindFirstChild("Neck")
	}
	local ogC0s = {}
	for k, joint in pairs(joints) do
		ogC0s[k] = joint and joint.C0
	end

	local times = {Lg=0, Rg=0, Lm=0, Rm=0, To=0, Hd=0}
	local last = 0
	local count = -1
	self.played = false

	task.spawn(function()
		while task.wait() do
			if self.played then
				for k, joint in pairs(joints) do
					if joint and ogC0s[k] then
						joint.C0 = ogC0s[k]
					end
				end
				break
			end

			local nextT = getnext(animData, count)
			local pose = animData[nextT]
			local delay = getSpeed(last, nextT)

			for k, joint in pairs(joints) do
				local cframe = pose[k]
				if cframe and joint and ogC0s[k] then
					local ti = TweenInfo.new(delay + times[k])
					times[k] = 0
					TweenService:Create(joint, ti, {C0 = ogC0s[k] * cframe}):Play()
				else
					times[k] = times[k] + delay
				end
			end

			task.wait(delay)
			last = nextT
			count = nextT
		end
	end)
end

function Main:Stop()
	self.played = true
end

--// EMPER-STYLE REANIMATION
do
	local Rig = Players:CreateHumanoidModelFromDescription(
		Players:GetHumanoidDescriptionFromUserId(Player.UserId), Enum.HumanoidRigType.R6
	)

	local RootPart = Rig:WaitForChild("HumanoidRootPart")
	local RealChar = Player.Character

	if RealChar then RealChar:BreakJoints() end
	Rig.Name = Player.Name
	Rig.Humanoid.DisplayName = Player.DisplayName
	Rig.Animate.Enabled = false

	for _, part in ipairs(Rig:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Transparency = fake_transparency
			part.CanCollide = false
		end
	end

	Rig.Parent = workspace
	Player.Character = Rig
	workspace.CurrentCamera.CameraSubject = Rig:FindFirstChildOfClass("Humanoid")

	--// SYNC ANGLES
	local Motor6Ds = {}
	for _, d in pairs(RealChar:GetDescendants()) do
		if d:IsA("Motor6D") and Rig:FindFirstChild(d.Part0.Name) and Rig:FindFirstChild(d.Part1.Name) then
			Motor6Ds[d] = {
				Part0 = Rig[d.Part0.Name],
				Part1 = Rig[d.Part1.Name]
			}
		end
	end

	RunService.PostSimulation:Connect(function()
		for motor, ref in pairs(Motor6Ds) do
			local delta = ref.Part0.CFrame:ToObjectSpace(ref.Part1.CFrame)
			local axis, angle = delta:ToAxisAngle()
			sethiddenproperty(motor, "ReplicateCurrentAngle6D", axis * angle)
			sethiddenproperty(motor, "ReplicateCurrentOffset6D", delta.Position)
		end
	end)

	RunService.PreSimulation:Connect(function()
		for _, bp in ipairs(Rig:GetDescendants()) do
			if bp:IsA("BasePart") then
				bp.CanCollide = false
			end
		end
	end)

	--// LOAD YOUR ANIMATION
	local animationPlayer = Main.LoadDummy(Rig)
	local track = animationPlayer:LoadAnimation(animationId)
	task.defer(function()
		track:Play()
	end)
end
